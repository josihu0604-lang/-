generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }

enum SubscriptionTier { FREE STARTER PRO ENTERPRISE }
enum SubscriptionStatus { ACTIVE CANCELLED PAST_DUE TRIALING }
enum DocumentType { UNKNOWN STATEMENT AGREEMENT INVOICE }
enum ExternalProvider { TOSS_CERT KFTC_OPENBANKING }

model User {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique
  password      String
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  tokens        ApiToken[]
  subscription  Subscription?
  usage         UsageRecord[]
  verifications Verification[]
  documents     Document[]
  externalAuths ExternalAuth[]
}

model ApiToken {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  token      String   @unique
  scopes     String[] @default([])
  lastUsedAt DateTime?
  createdAt  DateTime @default(now())
  @@index([userId])
  @@index([token])
}

model Subscription {
  id                   String   @id @default(uuid()) @db.Uuid
  userId               String   @unique @db.Uuid
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier                 SubscriptionTier
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([status])
  @@index([currentPeriodEnd])
}

model UsageRecord {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceType String
  count        Int      @default(1)
  billingMonth String
  createdAt    DateTime @default(now())
  @@unique([userId, resourceType, billingMonth])
  @@index([userId, billingMonth])
}

model Verification {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @db.Uuid
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issues          Json
  metrics         Json
  severityCounts  Json
  createdAt       DateTime @default(now())
  @@index([userId, createdAt(sort: Desc)])
}

model Document {
  id         String       @id @default(uuid()) @db.Uuid
  userId     String       @db.Uuid
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       DocumentType @default(UNKNOWN)
  metadata   Json?
  uploadedAt DateTime     @default(now())
}

model ExternalAuth {
  id             String           @id @default(uuid()) @db.Uuid
  userId         String           @db.Uuid
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider       ExternalProvider
  providerUserId String?
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  scope          String?
  metadata       Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
}
